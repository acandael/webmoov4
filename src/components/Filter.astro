---
import Button from "./ui/Button.astro";
---

<div class="equal-columns filters">
	<Button
		label="Alle"
		hiddenLabel="projecten"
		href="#"
		data-filter="all"
		class="filter-button active"
		variant="filter"
	/>
	<Button
		label="Onepager"
		hiddenLabel="projecten"
		href="#"
		data-filter="onepager"
		class="filter-button"
		variant="filter"
	/>
	<Button
		label="Premium"
		hiddenLabel="projecten"
		href="#"
		data-filter="premium"
		class="filter-button"
		variant="filter"
	/>
	<Button
		label="E-commerce"
		hiddenLabel="projecten"
		href="#"
		data-filter="ecommerce"
		class="filter-button"
		variant="filter"
	/>
</div>

<style>
	.filters {
		max-width: 850px;
		margin-inline: auto;
		display: flex;
		flex-wrap: wrap;
		gap: 0.75rem;
		justify-content: center;
		padding-inline: 1rem;
	}

	@media (min-width: 760px) {
		.filters {
			flex-wrap: nowrap;
			gap: 1rem;
			padding-inline: 0;
		}
	}

	:global(.filter-button) {
		font-size: var(--font-size-sm);
		min-width: calc(50% - 0.375rem);
		padding: 0.75rem 1rem;

		@media (min-width: 760px) {
			font-size: var(--font-size-md);
			min-width: unset;
			padding: 1rem 2rem;
		}
	}

	:global(.filter-button.active) {
		background: linear-gradient(
			180deg,
			var(--background-accent) 0%,
			var(--background-accent-dark) 246.53%
		) !important;
		color: var(--text-high-contrast) !important;
		box-shadow: var(--box-shadow) !important;
	}

	:global(.filter-button.active:hover) {
		background: linear-gradient(
			180deg,
			var(--background-accent) 0%,
			var(--background-accent-dark) 246.53%
		) !important;
	}

	:global(.project-card) {
		transition:
			opacity 0.3s ease,
			transform 0.3s ease;
	}

	:global(.project-card.hidden) {
		opacity: 0;
		transform: scale(0.8);
		pointer-events: none;
		position: absolute;
		visibility: hidden;
	}
</style>

<script>
	function initializeFilters() {
		const filterButtons = document.querySelectorAll<HTMLButtonElement>(".filter-button");
		const projectCards = document.querySelectorAll<HTMLElement>(".project-card");

		if (!filterButtons.length || !projectCards.length) return;

		filterButtons.forEach((button) => {
			button.addEventListener("click", () => {
				// Remove active class from all buttons
				filterButtons.forEach((btn) => btn.classList.remove("active"));
				// Add active class to clicked button
				button.classList.add("active");

				const filter = button.getAttribute("data-filter");
				if (!filter) return;

				projectCards.forEach((card) => {
					const cardType = card.getAttribute("data-type");
					if (filter === "all" || cardType === filter) {
						card.classList.remove("hidden");
					} else {
						card.classList.add("hidden");
					}
				});
			});
		});
	}

	// Initialize on page load
	initializeFilters();

	// Initialize when the DOM content is loaded (backup)
	document.addEventListener("DOMContentLoaded", initializeFilters);

	// Initialize when Astro page changes (for view transitions)
	document.addEventListener("astro:page-load", initializeFilters);
</script>
